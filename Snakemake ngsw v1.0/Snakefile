configfile: "config.yaml"

##cercare di modificare rule all con expand("sorted_reads/{samples}.sorted.bam", samples=config["samples"]) etc
 
rule all:
    input:
        "plots/quals.svg",
        "sorted_reads/A.sorted.bam.bai",
        "sorted_reads/B.sorted.bam.bai",
        "dedup/A.sorted.bam",
        "dedup/B.sorted.bam",
        "annotated/all.vcf",
        #"resources/vep/plugins"

rule bwa_map:
    input:
        "data/genome.fa",
        "data/samples/{sample}.fastq"
    output:
        "mapped_reads/{sample}.bam"  
    shell:
        "bwa mem {input} | samtools view -Sb - > {output}"


rule samtools_sort:
    input:
        "mapped_reads/{sample}.bam"
    output:
        "sorted_reads/{sample}.sorted.bam"
    shell:
        "samtools sort -T sorted_reads/{wildcards.sample} "
        "-O bam {input} > {output}"

rule samtools_mark_duplicates:
    input:
        "sorted_reads/{sample}.sorted.bam"
    output:
        "dedup/{sample}.sorted.bam"
    shell:
        "samtools markdup {input} {output}"

##al momento il problema di picard, così come di gatk in alcuni casi, è che prevedono per la linea di comando di specificare
##l'argomento -I prima di ogni input, mentre snakemake inserisce tutti gli input dopo la singola -I. Infatti, al di fuori
##di snakemake i programmi funzionano

#rule picard_mark_duplicates:
#    input: 
#        "sorted_reads/{sample}.sorted.bam"
#    output:
#        o="dedup/{sample}_markedup.sorted.bam",
#        m="dedup/{sample}.metrics.txt"
#    shell:
#        "picard MarkDuplicates -I {input} -O {output.o} -M {output.m}"

rule samtools_index:
    input:
        "sorted_reads/{sample}.sorted.bam"
    output:
        "sorted_reads/{sample}.sorted.bam.bai"
    shell:
        "samtools index {input}"

rule bcftools_call:
    input:
        fa="data/genome.fa",
        bam=expand("sorted_reads/{sample}.sorted.bam", sample=config["samples"])
    output:
        "calls/all.vcf"
    shell:
	#modificare con bcftools mpileup
        "samtools mpileup -g -f {input.fa} {input.bam} | "
        "bcftools call -mv - > {output}"

##stessa cosa detta per picard
#rule gatk_call:
#    input: 
#        fa="data/genome.fa",
#        bam=expand("sorted_reads/{sample}.sorted.bam", sample=config["samples"])
#    output:
#        "calls/all.vcf"
#    shell:
#        "gatk HaplotypeCaller --input {input.bam} --output {output} --reference {input.fa} "

##questa funziona, sto solo cercando di implementare VEP (questa funziona perché c'è un solo input infatti.)
##(Si potrebbe fare hard coding input per input, ma perderebbe di accessibilità (bisognerebbe ogni volta 
 ##aggiornare lo snakefile))

rule gatk_annotation:
    input:
        "calls/all.vcf"
    output:
        "annotated/all.vcf"
    shell:
        "gatk  VariantAnnotator --output annotated/all.vcf --variant calls/all.vcf -A Coverage"

##funziona: scarica i vep plugins
#rule download_vep_plugins:
#    output:
#        directory("resources/vep/plugins")
#    params:
#        release=100
#    wrapper:
#        "0.64.0/bio/vep/plugins"

rule plot_quals:
    input:
        "calls/all.vcf"
    output:
        "plots/quals.svg"
    script:
        "scripts/plot-quals.py"

