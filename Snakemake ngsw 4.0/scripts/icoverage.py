import pandas as pd
import xlsxwriter
import argparse


__author__ = "Tommaso Mazza"
__copyright__ = "Copyright 2017, COV formatter"
__version__ = "0.0.2"
__maintainer__ = "Tommaso Mazza"
__email__ = "bioinformatics@css-mendel.it"
__status__ = "Development"
__date__ = "08/08/2017"
__creator__ = "t.mazza"
__license__ = u"""
  Copyright (C) 20016-2017  Tommaso Mazza <t,mazza@css-mendel.it>
  Viale Regina Margherita 261, 00198 Rome, Italy

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc.,  51 Franklin Street, Fifth Floor, Boston, MA
  02110-1301 USA
  """


def load_cov(coverage_file: str) -> pd.DataFrame:
    """
    Load a cov file generated by coveragebed, made by the following columns "chr", "start", "end", "gene", "pos", "cov"
    :param coverage_file: The input COV file
    :return: A Pandas DataFrame containing all the regions of the COV file
    """
    return pd.read_csv(coverage_file, sep='\t', index_col=False, names=["chr", "start", "end", "gene", "pos", "cov"], encoding='windows-1252')

    # df1 = pd.concat(tp, ignore_index=True)  # df is DataFrame. If errors, do `list(tp)` instead of `tp`
    # df1.columns = ["chr", "start", "end", "gene", "pos", "cov"]
    # return df1


def filter_cov(cov_unfiltered: pd.DataFrame, threshold: int) -> pd.DataFrame:
    """
    Filter a pandas DataFrame and report only regions under a specified coverage threshold
    :param cov_unfiltered: The unfiltered DataFrame to be filtered
    :param threshold: Positive integer threshold number for the coverage filtering
    :return: A Pandas DataFrame containing the regions of the COV file under threshold
    """
    assert (threshold > 0), "Threshold must be a positive number!"

    return cov_unfiltered[cov_unfiltered.iloc[:, 5] < threshold], cov_unfiltered[cov_unfiltered.iloc[:, 5] >= threshold]


def get_all_uncovered_regions(filtered_dataframe: pd.DataFrame) -> pd.DataFrame:
    """
    Aggregate a pandas DataFrame by grouping by "chr", "start", "end", "gene", "cov", by calculating min and max
    positions of each poorly covered grouped regions and by calculating the width of each of these regions
    :param filtered_dataframe: Pandas DataFrame to be aggregated
    :return: An aggregated pandas DataFrame
    """
    cov_aggregated = filtered_dataframe.groupby(
        ["chr", "start", "end", "gene",
         (filtered_dataframe["pos"] != filtered_dataframe["pos"].shift() + 1).cumsum(),
         (filtered_dataframe["cov"] != filtered_dataframe["cov"].shift()).cumsum()], as_index=False)\
        .agg({'cov': 'first', 'pos': ['min', 'max']})

    cov_aggregated["min_pad"] = cov_aggregated["start"] - 1 + cov_aggregated["pos"]["min"]
    cov_aggregated["max_pad"] = cov_aggregated["start"] - 1 + cov_aggregated["pos"]["max"]
    cov_aggregated["width"] = cov_aggregated["pos"]["max"] - cov_aggregated["pos"]["min"] + 1
    cov_aggregated = cov_aggregated[["gene", "chr", "min_pad", "max_pad", "width", "cov"]]
    cov_aggregated.columns = ["gene", "chr", "min", "max", "width", "cov"]

    return cov_aggregated


def calc_uncovered_percentage(all_uncovered_regions: pd.DataFrame, all_cov_unfiltered: pd.DataFrame) -> pd.DataFrame:
    """
    Calculate the percentage of uncovered regions
    :param all_uncovered_regions: All uncovered regions under the threshold
    :param all_cov_unfiltered: all uncovered regions
    :return: The rightmost DataFrame in the final report
    """
    fec_rep = all_uncovered_regions.groupby("gene")["width"].sum().reset_index()
    fec_rep.columns = ['gene', 'width']

    genes_length = all_cov_unfiltered.groupby("gene")["cov"].count().reset_index()
    genes_length.columns = ["gene", "gene_length"]

    excel_final = pd.merge(fec_rep, genes_length, on=['gene'], how='inner')
    excel_final = excel_final[["gene", "width", "gene_length"]]
    excel_final["percentage"] = (100 - (excel_final["width"] / excel_final["gene_length"]) * 100).round(2)

    return excel_final


def print_report(outfile: str, unc_regions: pd.DataFrame, unc_percentage: pd.DataFrame, rest_percentage: pd.DataFrame):
    workbook = xlsxwriter.Workbook(outfile)
    worksheet = workbook.add_worksheet()
    worksheet.write(0,0,"Gene")
    worksheet.write(0,1,"Chr")
    worksheet.write(0,2,"Start")
    worksheet.write(0,3,"End")
    worksheet.write(0,4,"Width")
    worksheet.write(0,5,"Cov")

    worksheet.write(0,8,"Gene")
    worksheet.write(0,9,"Tot under cov")
    worksheet.write(0,10,"Gene length")
    worksheet.write(0,11,"Percentage")

    col = 0
    for i in unc_regions.index:
        worksheet.write(i + 1, 0, unc_regions.iloc[i, col])
        worksheet.write(i + 1, 1, unc_regions.iloc[i, col + 1])
        worksheet.write(i + 1, 2, unc_regions.iloc[i, col + 2])
        worksheet.write(i + 1, 3, unc_regions.iloc[i, col + 3])
        worksheet.write(i + 1, 4, unc_regions.iloc[i, col + 4])
        worksheet.write(i + 1, 5, unc_regions.iloc[i, col + 5])

    for i in unc_percentage.index:
        worksheet.write(i+1, 8, unc_percentage.iloc[i, col])
        worksheet.write(i+1, 9, unc_percentage.iloc[i, col + 1])
        worksheet.write(i+1, 10, unc_percentage.iloc[i, col + 2])
        worksheet.write(i+1, 11, unc_percentage.iloc[i, col + 3])

    n = len(unc_percentage.index)+2
    for i in rest_percentage.index:
        worksheet.write(i+n, 8, rest_percentage.iloc[i, col])
        worksheet.write(i+n, 9, 0)
        worksheet.write(i+n, 10, rest_percentage.iloc[i, col + 2])
        worksheet.write(i+n, 11, 100-float(rest_percentage.iloc[i, col + 3]))

    workbook.close()


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-c", "--cov", required=True, help="COV file to be formatted")
    parser.add_argument("-t", "--threshold", required=False, help="Coverage limit", default=30)
    parser.add_argument("-o", "--out", required=True, help="Output excel file")

    args = parser.parse_args()
    cov_file = args.cov
    threshold = int(args.threshold)
    out_file = args.out

    unfiltered_cov = load_cov(cov_file)
    filtered_cov, rest = filter_cov(unfiltered_cov, threshold)
    hit_genes = filtered_cov.gene.unique()
    rest=rest[~rest['gene'].isin(hit_genes)]
    rest = get_all_uncovered_regions(rest)
    rest = rest.drop_duplicates().reset_index(drop=True)

    uncovered_regions = get_all_uncovered_regions(filtered_cov)
    uncovered_regions = uncovered_regions.drop_duplicates().reset_index(drop=True)

    uncovered_percentage = calc_uncovered_percentage(uncovered_regions, unfiltered_cov)
    rest_percentage = calc_uncovered_percentage(rest, unfiltered_cov)
    print_report(out_file, uncovered_regions, uncovered_percentage, rest_percentage)
